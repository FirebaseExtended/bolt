// Functionally similar rules to
// https://github.com/firebase/blaze_compiler/blob/master/examples/mail_example.yaml

type Message {
  from: String
  to: String
  message: String

  validate() {
    return isCurrentUser(this.from);
  }

  // extensible(prop) { return false; }
}

// The inbox is someone's incoming mail.
path /users/$userid/inbox/$msg is Message {
  // Users can read their own inbox
  read() { return isCurrentUser($userid); }

  // Anyone can send a message to anybody by posting in the users inbox, as long as they have
  // the correct sender field.
  write() {
    return isCreating(this) ||
      isUpdating(this) && isCurrentUser($userid);
  }

}

// The outbox is for recording what has been sent by a user.
path /users/$userid/outbox/$msg is Message {
  read() { return isCurrentUser($userid); }

  write() {
    return isCreating(this) ||
      isUpdating(this) && isCurrentUser($userid);
  }
}

function isCreating(old) {
  return prior(old) == null;
}

function isUpdating(old) {
  return prior(old) != null;
}

function isCurrentUser(userid) {
  return currentUser() == userid;
}

function currentUser() {
  return auth.username;
}
