// Rules defined using new Rules Engine syntax.

type Document extends object {}

type Date extends string {
  // validate() { return isISODate(this); }
}

type Userid extends string {
  // validate() { return userExists(this); }
}

type Docid extends string {}

type Metadata {
  created: Date,
  modified: Date,
  title: string,

  extensible(prop) { return true; }
}

type Permission {
  grantor: Userid,
  grantee: Userid,
  docid: Docid
}

// Note no query support for /documents/$userid.
path /documents/$userid/$docid {
  validate() { return this instanceof Document; }
  read() { return isCurrentUser($userid) || hasPermission($docid, 'read'); }
  write() { return isCurrentUser($userid) || hasPermission($docid, 'write'); }
}

// Allow reading the list of all a user's own metadata.
path /metadata/$userid {
  read() { return isCurrentUser($userid); }
}

path /metadata/$userid/$docid {
  validate() { return this instanceof Metadata; }
  read() { return hasPermission($docid, 'read'); }
  write() { return isCurrentUser($userid) || hasPermission($docid, 'write'); }
}

path /permissions {
  read() { return isLoggedIn(); }
  index() { return ['grantor', 'grantee', 'docid']; }
}

path /permissions/$key {
  // Limit structure of the key format to "grantee|docid".
  validate() {
    return this instanceof Permission &&
           $key == fullId(this.grantee, this.docid) &&
           this.grantor == currentUser();
  }
  write() {
    // BUG: Can have two-docid's owned by different owners - permissions can be stolen!
    return this == null && isCurrentUser(data.grantor) ||
           this != null && docIsOwnedBy(this.docid, currentUser());
  }
  // No read() rule neeeded since this is only used in hasPermission()
}

function isLoggedIn() {
  return auth != null;
}

function isCurrentUser(userid) {
  return currentUser() == userid;
}

function currentUser() {
  return auth.uid;
}

function fullId(userid, docid) {
  return userid + '|' + docid;
}

function hasPermission(docid, p) {
  return root.permissions[fullId(currentUser(), docid)][p];
}

function docIsOwnedBy(docid, userid) {
  return root.documents[userid][docid] != null;
}

function isISODate(date) {
  // TODO: Use .match instead - needs specific translator for string->regexp in language.
  return beginsWith(date, '2015-');
}

function userExists(userid) {
  return root.users[userid] != null;
}
