// Rules defined using new Rules Engine syntax.

type Document extends Object {}

type Date extends String {
  // validate() { return isISODate(this); }
}

type Userid extends String {
  // validate() { return userExists(this); }
}

type Docid extends String {}

type Metadata {
  created: Date,
  modified: Date,
  title: String,

  // extensible(prop) { return true; }
}

type Permission {
  owner: Userid,
  grantee: Userid,
  docid: Docid
}

path /documents/$ownerid {
  read()  { return isCurrentUser($ownerid); }
  write() { return isCurrentUser($ownerid); }
}

path /documents/$ownerid/$docid is Document {
  read()  { return hasPermission($ownerid, $docid, 'read'); }
  write() { return hasPermission($ownerid, $docid, 'write'); }
}

// Allow reading the list of all a user's own metadata.
path /metadata/$ownerid {
  read()  { return isCurrentUser($ownerid); }
  write() { return isCurrentUser($ownerid); }
}

path /metadata/$ownerid/$docid is Metadata {
  read()  { return hasPermission($ownerid, $docid, 'read'); }
  write() { return hasPermission($ownerid, $docid, 'write'); }
}

path /permissions {
  read()  { return isLoggedIn(); }
  index() { return ['owner', 'grantee', 'docid']; }
}

path /permissions/$key is Permission {
  write() {
    return this == null && isCurrentUser(prior(this.owner)) ||
      this != null &&
      // Limit structure of the key format to "grantee|owner|docid"
      $key == fullId(this.grantee, this.owner, this.docid) &&
      isCurrentUser(this.owner) &&
      docIsOwnedBy(this.docid, currentUser());
  }
  // No read() rule neeeded since this is only used in hasPermission()
}

function isLoggedIn() {
  return auth != null;
}

function isCurrentUser(userid) {
  return currentUser() == userid;
}

function currentUser() {
  return auth.uid;
}

function fullId(userid, ownerid, docid) {
  return userid + '|' + ownerid + '|' + docid;
}

function hasPermission(ownerid, docid, p) {
  return root.permissions[fullId(currentUser(), ownerid, docid)][p];
}

function docIsOwnedBy(docid, userid) {
  return root.documents[userid][docid] != null;
}

function isISODate(date) {
  // TODO: Use .match instead - needs specific translator for string->regexp in language.
  return beginsWith(date, '2015-');
}

function userExists(userid) {
  return root.users[userid] != null;
}
