"use strict";
var Promise = require('promise');
var https = require('https');
var util = require('./util');
var querystring = require('querystring');
var uuid = require('node-uuid');
var firebase = require('firebase');
var FIREBASE_HOST = 'firebaseio.com';
var DEBUG_HEADER = 'x-firebase-auth-debug';
exports.RULES_LOCATION = '/.settings/rules';
exports.TIMESTAMP = { ".sv": "timestamp" };
function Client(appName, secret) {
    this.appName = appName;
    this.secret = secret;
}
exports.Client = Client;
util.methods(Client, {
    setDebug: function (debug) {
        if (debug === undefined) {
            debug = true;
        }
        this.debug = debug;
        return this;
    },
    get: function (location) {
        return this.request({ method: 'GET' }, location);
    },
    put: function (location, content) {
        return this.request({ method: 'PUT', print: 'silent' }, location, content);
    },
    request: function (opt, path, content) {
        var options = {
            hostname: this.appName + '.' + FIREBASE_HOST,
            path: path + '.json',
            method: opt.method
        };
        var query = {};
        if (opt.print) {
            query.print = opt.print;
        }
        query.auth = this.secret;
        if (Object.keys(query).length > 0) {
            options.path += '?' + querystring.stringify(query);
        }
        content = util.prettyJSON(content);
        return request(options, content, this.debug)
            .then(function (body) {
            return body === '' ? null : JSON.parse(body);
        });
    }
});
var ridNext = 0;
function request(options, content, debug) {
    ridNext += 1;
    var rid = ridNext;
    function log(s) {
        if (debug) {
            console.log("Request<" + rid + ">: " + s);
        }
    }
    log("Request: " + util.prettyJSON(options));
    if (content) {
        log("Body: '" + content + "'");
    }
    return new Promise(function (resolve, reject) {
        var req = https.request(options, function (res) {
            var chunks = [];
            res.on('data', function (body) {
                chunks.push(body);
            });
            res.on('end', function () {
                var result = chunks.join('');
                log("Result (" + res.statusCode + "): '" + result + "'");
                if (Math.floor(res.statusCode / 100) !== 2) {
                    var message = "Status = " + res.statusCode + " " + result;
                    if (res.headers[DEBUG_HEADER]) {
                        var formattedHeader = res.headers[DEBUG_HEADER].split(' /').join('\n  /');
                        log(formattedHeader);
                        message += "\n" + formattedHeader;
                    }
                    reject(new Error(message));
                }
                else {
                    resolve(result);
                }
            });
        });
        if (content) {
            req.write(content, 'utf8');
        }
        req.end();
        req.on('error', function (error) {
            log("Request error: " + error);
            reject(error);
        });
    });
}
function createFirebaseDbRefForUser(username, appName) {
    var uid = uuid.v4();
    var fbClient;
    if (username === 'anon') {
        fbClient = firebase.initializeApp({
            databaseURL: 'https://' + appName + '.firebaseio.com/'
        }, uid);
    }
    else {
        fbClient = firebase.initializeApp({
            databaseURL: 'https://' + appName + '.firebaseio.com/',
            serviceAccount: "./serviceAccountCredentials.json",
            databaseAuthVariableOverride: {
                uid: uid
            }
        }, uid);
    }
    fbClient.uid = uid;
    return fbClient;
}
exports.createFirebaseDbRefForUser = createFirebaseDbRefForUser;

//# sourceMappingURL=data:application/json;base64,
