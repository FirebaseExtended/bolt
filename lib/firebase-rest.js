"use strict";
var Promise = require('promise');
var https = require('https');
var util = require('./util');
var querystring = require('querystring');
var uuid = require('node-uuid');
var FirebaseTokenGenerator = require('firebase-token-generator');
var FIREBASE_HOST = 'firebaseio.com';
var DEBUG_HEADER = 'x-firebase-auth-debug';
exports.RULES_LOCATION = '/.settings/rules';
exports.TIMESTAMP = { ".sv": "timestamp" };
function Client(appName, authToken, uid) {
    this.appName = appName;
    this.authToken = authToken;
    this.uid = uid;
}
exports.Client = Client;
util.methods(Client, {
    setDebug: function (debug) {
        if (debug === undefined) {
            debug = true;
        }
        this.debug = debug;
        return this;
    },
    get: function (location) {
        return this.request({ method: 'GET' }, location);
    },
    put: function (location, content) {
        return this.request({ method: 'PUT', print: 'silent' }, location, content);
    },
    request: function (opt, path, content) {
        var options = {
            hostname: this.appName + '.' + FIREBASE_HOST,
            path: path + '.json',
            method: opt.method
        };
        var query = {};
        if (opt.print) {
            query.print = opt.print;
        }
        if (this.authToken) {
            query.auth = this.authToken;
        }
        if (Object.keys(query).length > 0) {
            options.path += '?' + querystring.stringify(query);
        }
        content = util.prettyJSON(content);
        return request(options, content, this.debug)
            .then(function (body) {
            return body === '' ? null : JSON.parse(body);
        });
    }
});
var ridNext = 0;
function request(options, content, debug) {
    ridNext += 1;
    var rid = ridNext;
    function log(s) {
        if (debug) {
            console.log("Request<" + rid + ">: " + s);
        }
    }
    log("Request: " + util.prettyJSON(options));
    if (content) {
        log("Body: '" + content + "'");
    }
    return new Promise(function (resolve, reject) {
        var req = https.request(options, function (res) {
            var chunks = [];
            res.on('data', function (body) {
                chunks.push(body);
            });
            res.on('end', function () {
                var result = chunks.join('');
                log("Result (" + res.statusCode + "): '" + result + "'");
                if (Math.floor(res.statusCode / 100) !== 2) {
                    var message = "Status = " + res.statusCode + " " + result;
                    if (res.headers[DEBUG_HEADER]) {
                        var formattedHeader = res.headers[DEBUG_HEADER].split(' /').join('\n  /');
                        log(formattedHeader);
                        message += "\n" + formattedHeader;
                    }
                    reject(new Error(message));
                }
                else {
                    resolve(result);
                }
            });
        });
        if (content) {
            req.write(content, 'utf8');
        }
        req.end();
        req.on('error', function (error) {
            log("Request error: " + error);
            reject(error);
        });
    });
}
function generateUidAuthToken(secret, opts) {
    opts = util.extend({ debug: false, admin: false }, opts);
    var tokenGenerator = new FirebaseTokenGenerator(secret);
    var uid = uuid.v4();
    var token = tokenGenerator.createToken({ uid: uid }, opts);
    return { uid: uid, token: token };
}
exports.generateUidAuthToken = generateUidAuthToken;
var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';
var lastPushTime = 0;
var lastRandChars = [];
function generatePushID() {
    var now = new Date().getTime();
    var duplicateTime = (now === lastPushTime);
    lastPushTime = now;
    var timeStampChars = new Array(8);
    for (var i = 7; i >= 0; i--) {
        timeStampChars[i] = PUSH_CHARS.charAt(now % 64);
        now = Math.floor(now / 64);
    }
    if (now !== 0) {
        throw new Error('We should have converted the entire timestamp.');
    }
    var id = timeStampChars.join('');
    if (!duplicateTime) {
        for (i = 0; i < 12; i++) {
            lastRandChars[i] = Math.floor(Math.random() * 64);
        }
    }
    else {
        for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {
            lastRandChars[i] = 0;
        }
        lastRandChars[i]++;
    }
    for (i = 0; i < 12; i++) {
        id += PUSH_CHARS.charAt(lastRandChars[i]);
    }
    if (id.length !== 20) {
        throw new Error('Length should be 20.');
    }
    return id;
}
exports.generatePushID = generatePushID;

//# sourceMappingURL=data:application/json;base64,
