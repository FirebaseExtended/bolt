"use strict";
var lastError;
var lastMessage;
var errorCount;
var silenceOutput;
var getContext = function () { return ({}); };
reset();
function reset() {
    lastError = undefined;
    lastMessage = undefined;
    errorCount = 0;
    silenceOutput = false;
}
exports.reset = reset;
function silent(f) {
    if (f === void 0) { f = true; }
    silenceOutput = f;
}
exports.silent = silent;
function setContext(fn) {
    getContext = fn;
}
exports.setContext = setContext;
function error(s) {
    var err = errorString(s);
    if (err === lastMessage) {
        return;
    }
    lastMessage = err;
    lastError = lastMessage;
    if (!silenceOutput) {
        console.error(lastError);
    }
    errorCount += 1;
}
exports.error = error;
function warn(s) {
    var err = errorString(s);
    if (err === lastMessage) {
        return;
    }
    lastMessage = err;
    if (!silenceOutput) {
        console.warn(lastMessage);
    }
}
exports.warn = warn;
function getLastMessage() {
    return lastMessage;
}
exports.getLastMessage = getLastMessage;
function errorString(s) {
    var ctx = getContext();
    if (ctx.line !== undefined && ctx.column !== undefined) {
        return 'bolt:' + ctx.line + ':' + ctx.column + ': ' + s;
    }
    else {
        return 'bolt: ' + s;
    }
}
function hasErrors() {
    return errorCount > 0;
}
exports.hasErrors = hasErrors;
function errorSummary() {
    if (errorCount === 1) {
        return lastError;
    }
    if (errorCount !== 0) {
        return "Fatal errors: " + errorCount;
    }
    return "";
}
exports.errorSummary = errorSummary;

//# sourceMappingURL=data:application/json;base64,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LENBQUMsZ0JBQWdCLEdBQUcsVUFBVSxDQUFDO0lBQ3ZDLENBQUM7SUFDRCxNQUFNLENBQUMsRUFBRSxDQUFDO0FBQ1osQ0FBQztBQVRlLG9CQUFZLGVBUzNCLENBQUEiLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwidHlwaW5ncy9ub2RlLmQudHNcIiAvPlxyXG5cclxubGV0IGxhc3RFcnJvcjogc3RyaW5nO1xyXG5sZXQgbGFzdE1lc3NhZ2U6IHN0cmluZztcclxubGV0IGVycm9yQ291bnQ6IG51bWJlcjtcclxubGV0IHNpbGVuY2VPdXRwdXQ6IGJvb2xlYW47XHJcblxyXG5sZXQgZ2V0Q29udGV4dCA9ICgpID0+ICg8RXJyb3JDb250ZXh0PiB7fSk7XHJcblxyXG5yZXNldCgpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0KCkge1xyXG4gIGxhc3RFcnJvciA9IHVuZGVmaW5lZDtcclxuICBsYXN0TWVzc2FnZSA9IHVuZGVmaW5lZDtcclxuICBlcnJvckNvdW50ID0gMDtcclxuICBzaWxlbmNlT3V0cHV0ID0gZmFsc2U7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzaWxlbnQoZiA9IHRydWUpIHtcclxuICBzaWxlbmNlT3V0cHV0ID0gZjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBFcnJvckNvbnRleHQge1xyXG4gIGxpbmU/OiBudW1iZXI7XHJcbiAgY29sdW1uPzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0Q29udGV4dChmbjogKCkgPT4gRXJyb3JDb250ZXh0KSB7XHJcbiAgZ2V0Q29udGV4dCA9IGZuO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXJyb3Ioczogc3RyaW5nKSB7XHJcbiAgbGV0IGVyciA9IGVycm9yU3RyaW5nKHMpO1xyXG4gIC8vIERlLWR1cCBpZGVudGljYWwgbWVzc2FnZXNcclxuICBpZiAoZXJyICA9PT0gbGFzdE1lc3NhZ2UpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgbGFzdE1lc3NhZ2UgPSBlcnI7XHJcbiAgbGFzdEVycm9yID0gbGFzdE1lc3NhZ2U7XHJcbiAgaWYgKCFzaWxlbmNlT3V0cHV0KSB7XHJcbiAgICBjb25zb2xlLmVycm9yKGxhc3RFcnJvcik7XHJcbiAgfVxyXG4gIGVycm9yQ291bnQgKz0gMTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHdhcm4oczogc3RyaW5nKSB7XHJcbiAgbGV0IGVyciA9IGVycm9yU3RyaW5nKHMpO1xyXG4gIC8vIERlLWR1cCBpZGVudGljYWwgbWVzc2FnZXNcclxuICBpZiAoZXJyID09PSBsYXN0TWVzc2FnZSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBsYXN0TWVzc2FnZSA9IGVycjtcclxuICBpZiAoIXNpbGVuY2VPdXRwdXQpIHtcclxuICAgIGNvbnNvbGUud2FybihsYXN0TWVzc2FnZSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGFzdE1lc3NhZ2UoKTogc3RyaW5nIHtcclxuICByZXR1cm4gbGFzdE1lc3NhZ2U7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVycm9yU3RyaW5nKHM6IHN0cmluZykge1xyXG4gIGxldCBjdHggPSBnZXRDb250ZXh0KCk7XHJcbiAgaWYgKGN0eC5saW5lICE9PSB1bmRlZmluZWQgJiYgY3R4LmNvbHVtbiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICByZXR1cm4gJ2JvbHQ6JyArIGN0eC5saW5lICsgJzonICsgY3R4LmNvbHVtbiArICc6ICcgKyBzO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gJ2JvbHQ6ICcgKyBzO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGhhc0Vycm9ycygpOiBib29sZWFuIHtcclxuICByZXR1cm4gZXJyb3JDb3VudCA+IDA7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBlcnJvclN1bW1hcnkoKTogc3RyaW5nIHtcclxuICBpZiAoZXJyb3JDb3VudCA9PT0gMSkge1xyXG4gICAgcmV0dXJuIGxhc3RFcnJvcjtcclxuICB9XHJcblxyXG4gIGlmIChlcnJvckNvdW50ICE9PSAwKSB7XHJcbiAgICByZXR1cm4gXCJGYXRhbCBlcnJvcnM6IFwiICsgZXJyb3JDb3VudDtcclxuICB9XHJcbiAgcmV0dXJuIFwiXCI7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
