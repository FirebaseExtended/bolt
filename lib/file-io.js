"use strict";
var Promise = require('promise');
var fs = require('fs');
var util = require('./util');
exports.readFile = util.maybePromise(readFileSync);
exports.readJSONFile = util.maybePromise(readJSONFileSync);
exports.writeFile = util.maybePromise(writeFileSync);
exports.writeJSONFile = util.maybePromise(writeJSONFileSync);
function readJSONFileSync(path, fnFallback) {
    return readFileSync(path)
        .then(function (response) {
        return JSON.parse(response.content);
    })
        .catch(function (error) {
        if (error.code === 'ENOENT' && typeof fnFallback === 'function') {
            return fnFallback();
        }
        throw error;
    });
}
function writeJSONFileSync(path, data) {
    return writeFileSync(path, util.prettyJSON(data));
}
function readFileSync(path) {
    return request('GET', path) || readFS(path);
}
function writeFileSync(path, data) {
    return request('PUT', path, data) || writeFS(path, data);
}
function request(method, url, data) {
    if (!global.XMLHttpRequest) {
        return undefined;
    }
    return new Promise(function (resolve, reject) {
        var req = new XMLHttpRequest();
        req.open(method, '/' + url);
        req.onload = function () {
            if (req.status === 200) {
                resolve({ content: req.response, url: url });
            }
            else {
                reject(new Error(url + " " + req.statusText));
            }
        };
        req.onerror = function () {
            reject(new Error(url + " Network Error"));
        };
        if (data) {
            req.setRequestHeader('Content-Type', 'text');
        }
        req.send(data);
    });
}
function readFS(path) {
    return new Promise(function (resolve, reject) {
        fs.readFile(path, { encoding: 'utf8' }, function (error, data) {
            if (error) {
                reject(error);
                return;
            }
            resolve({ url: path, content: data });
        });
    });
}
function writeFS(path, data) {
    return new Promise(function (resolve, reject) {
        fs.writeFile(path, data, { encoding: 'utf8' }, function (error) {
            if (error) {
                reject(error);
                return;
            }
            resolve({ url: path, content: "ok" });
        });
    });
}

//# sourceMappingURL=data:application/json;base64,
