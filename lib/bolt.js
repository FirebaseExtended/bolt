"use strict";
var parser = require('./rules-parser');
var generator = require('./rules-generator');
var simulator = require('./simulator');
var astReal = require('./ast');
var util = require('./util');
exports.FILE_EXTENSION = 'bolt';
exports.parse = util.maybePromise(parser.parse);
exports.generate = util.maybePromise(generateSync);
exports.Generator = generator.Generator;
exports.ast = astReal;
exports.decodeExpression = exports.ast.decodeExpression;
exports.rulesSuite = simulator.rulesSuite;
function generateSync(symbols) {
    if (typeof symbols === 'string') {
        symbols = parser.parse(symbols);
    }
    var gen = new generator.Generator(symbols);
    return gen.generateRules();
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJvbHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQWlCQSxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUN2QyxJQUFPLFNBQVMsV0FBVyxtQkFBbUIsQ0FBQyxDQUFDO0FBQ2hELElBQU8sU0FBUyxXQUFXLGFBQWEsQ0FBQyxDQUFDO0FBQzFDLElBQU8sT0FBTyxXQUFXLE9BQU8sQ0FBQyxDQUFDO0FBQ2xDLElBQU8sSUFBSSxXQUFXLFFBQVEsQ0FBQyxDQUFDO0FBQ3JCLHNCQUFjLEdBQUcsTUFBTSxDQUFDO0FBQ3hCLGFBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4QyxnQkFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDM0MsaUJBQVMsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDO0FBQ2hDLFdBQUcsR0FBRyxPQUFPLENBQUM7QUFDZCx3QkFBZ0IsR0FBRyxXQUFHLENBQUMsZ0JBQWdCLENBQUM7QUFDeEMsa0JBQVUsR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDO0FBSTdDLHNCQUFzQixPQUFpQztJQUNyRCxFQUFFLENBQUMsQ0FBQyxPQUFPLE9BQU8sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLE9BQU8sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFDRCxJQUFJLEdBQUcsR0FBRyxJQUFJLFNBQVMsQ0FBQyxTQUFTLENBQW1CLE9BQU8sQ0FBQyxDQUFDO0lBQzdELE1BQU0sQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDN0IsQ0FBQyIsImZpbGUiOiJib2x0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwidHlwaW5ncy9ub2RlLmQudHNcIiAvPlxyXG5cclxudmFyIHBhcnNlciA9IHJlcXVpcmUoJy4vcnVsZXMtcGFyc2VyJyk7XHJcbmltcG9ydCBnZW5lcmF0b3IgPSByZXF1aXJlKCcuL3J1bGVzLWdlbmVyYXRvcicpO1xyXG5pbXBvcnQgc2ltdWxhdG9yID0gcmVxdWlyZSgnLi9zaW11bGF0b3InKTtcclxuaW1wb3J0IGFzdFJlYWwgPSByZXF1aXJlKCcuL2FzdCcpO1xyXG5pbXBvcnQgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xyXG5leHBvcnQgdmFyIEZJTEVfRVhURU5TSU9OID0gJ2JvbHQnO1xyXG5leHBvcnQgdmFyIHBhcnNlID0gdXRpbC5tYXliZVByb21pc2UocGFyc2VyLnBhcnNlKTtcclxuZXhwb3J0IHZhciBnZW5lcmF0ZSA9IHV0aWwubWF5YmVQcm9taXNlKGdlbmVyYXRlU3luYyk7XHJcbmV4cG9ydCB2YXIgR2VuZXJhdG9yID0gZ2VuZXJhdG9yLkdlbmVyYXRvcjtcclxuZXhwb3J0IHZhciBhc3QgPSBhc3RSZWFsO1xyXG5leHBvcnQgdmFyIGRlY29kZUV4cHJlc3Npb24gPSBhc3QuZGVjb2RlRXhwcmVzc2lvbjtcclxuZXhwb3J0IHZhciBydWxlc1N1aXRlID0gc2ltdWxhdG9yLnJ1bGVzU3VpdGU7XHJcblxyXG4vLyBVc2FnZTpcclxuLy8gICBqc29uID0gYm9sdC5nZW5lcmF0ZShib2x0LXRleHQpXHJcbmZ1bmN0aW9uIGdlbmVyYXRlU3luYyhzeW1ib2xzOiBzdHJpbmcgfCBhc3RSZWFsLlN5bWJvbHMpOiBnZW5lcmF0b3IuVmFsaWRhdG9yIHtcclxuICBpZiAodHlwZW9mIHN5bWJvbHMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICBzeW1ib2xzID0gcGFyc2VyLnBhcnNlKHN5bWJvbHMpO1xyXG4gIH1cclxuICB2YXIgZ2VuID0gbmV3IGdlbmVyYXRvci5HZW5lcmF0b3IoPGFzdFJlYWwuU3ltYm9scz4gc3ltYm9scyk7XHJcbiAgcmV0dXJuIGdlbi5nZW5lcmF0ZVJ1bGVzKCk7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
