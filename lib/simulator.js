"use strict";
var Promise = require('promise');
var chai = require('chai');
var assert = chai.assert;
var rest = require('./firebase-rest');
var util = require('./util');
var fileIO = require('./file-io');
var bolt = (typeof window !== 'undefined' && window.bolt) || require('./bolt');
var MAX_TEST_MS = 60000;
function rulesSuite(suiteName, fnSuite) {
    new RulesSuite(suiteName, fnSuite).run();
}
exports.rulesSuite = rulesSuite;
function RulesSuite(suiteName, fnSuite) {
    this.suiteName = suiteName;
    this.fnSuite = fnSuite;
    this.users = {};
    this.tests = [];
    this.debug = false;
}
util.methods(RulesSuite, {
    setDebug: function (debug) {
        if (debug === undefined) {
            debug = true;
        }
        this.debug = debug;
        return this;
    },
    run: function () {
        var self = this;
        suite("Firebase Rules Simulator: " + self.suiteName, function () {
            this.timeout(MAX_TEST_MS);
            suiteSetup(function () {
                var rulesPath = new Promise(function (resolve) {
                    self.rulesPathResolve = resolve;
                });
                var database = new Promise(function (resolve) {
                    self.databaseReady = resolve;
                });
                var rulesJSON = bolt.generate(util.getProp(fileIO.readFile(rulesPath), 'content'));
                self.ready = Promise.all([rulesJSON, database])
                    .then(self.onRulesReady.bind(self));
                self.fnSuite(self.getInterface());
                return self.ready;
            });
            test("Initialization.", function () {
            });
            test("Rules test.", function () {
                return self.runTests();
            });
        });
    },
    getInterface: function () {
        var test = this.test.bind(this);
        test.rules = this.rules.bind(this);
        test.database = this.database.bind(this);
        test.uid = this.uid.bind(this);
        test.TIMESTAMP = rest.TIMESTAMP;
        return test;
    },
    onRulesReady: function (prereq) {
        this.rules = prereq[0];
        return this.adminClient.put(rest.RULES_LOCATION, this.rules);
    },
    runTests: function () {
        var p = Promise.resolve(true);
        function next(prev, test) {
            return prev.then(function () {
                return test.run();
            });
        }
        for (var i = 0; i < this.tests.length; i++) {
            p = next(p, this.tests[i]);
        }
        return p;
    },
    test: function (testName, fnTest) {
        this.tests.push(new RulesTest(testName, this, fnTest));
    },
    rules: function (rulesPath) {
        if (this.rulesPath) {
            throw new Error("Only expect a single call to the test.rules function.");
        }
        this.rulesPath = rulesPath;
        this.rulesPathResolve(util.ensureExtension(rulesPath, bolt.FILE_EXTENSION));
    },
    database: function (appName, appSecret) {
        if (this.adminClient) {
            throw new Error("Only expect a single call to the test.database function.");
        }
        this.appName = appName;
        this.appSecret = appSecret;
        this.adminClient = this.ensureUser('admin');
        this.databaseReady();
    },
    uid: function (username) {
        return this.ensureUser(username).uid;
    },
    ensureUser: function (username) {
        if (!(username in this.users)) {
            if (username === 'anon') {
                this.users[username] = new rest.Client(this.appName);
            }
            else {
                var tokenInfo;
                tokenInfo = rest.generateUidAuthToken(this.appSecret, { debug: true,
                    admin: username === 'admin' });
                this.users[username] = new rest.Client(this.appName, tokenInfo.token, tokenInfo.uid);
            }
        }
        return this.users[username];
    }
});
function RulesTest(testName, suite, fnTest) {
    this.testName = testName;
    this.suite = suite;
    this.fnTest = fnTest;
    this.status = undefined;
    this.lastError = undefined;
    this.steps = [];
    this.failed = false;
    this.path = undefined;
    this.auth = undefined;
}
util.methods(RulesTest, {
    run: function () {
        var _this = this;
        this.debug(false);
        this.as('admin');
        this.at('/');
        this.write(null);
        this.succeeds("initialization");
        this.at(undefined);
        this.as('anon');
        this.fnTest(this);
        this.debug(false);
        return this.executeQueue()
            .then(function () {
            _this.log("Finished");
        })
            .catch(function (error) {
            _this.log("Failed: " + error);
            throw error;
        });
    },
    queue: function (op, args, fn) {
        if (this.failed) {
            return;
        }
        args = util.copyArray(args).map(function (x) {
            return util.prettyJSON(x);
        });
        var label = op + '(' + args.join(', ') + ')';
        this.steps.push({ label: label, fn: fn });
    },
    executeQueue: function () {
        var self = this;
        this.log("Executing (" + this.steps.length + " steps)");
        var p = Promise.resolve(true);
        function next(prev, step) {
            return prev.then(function () {
                self.log(step.label);
                return step.fn();
            });
        }
        for (var i = 0; i < this.steps.length; i++) {
            p = next(p, this.steps[i]);
        }
        return p;
    },
    debug: function (debug) {
        var _this = this;
        this.suite.setDebug(debug);
        this.queue('debug', arguments, function () {
            _this.suite.setDebug(debug);
        });
        return this;
    },
    as: function (username) {
        var _this = this;
        var client = this.suite.ensureUser(username);
        this.queue('as', arguments, function () {
            _this.client = client;
        });
        return this;
    },
    at: function (opPath) {
        var _this = this;
        this.queue('at', arguments, function () {
            _this.path = opPath;
        });
        return this;
    },
    write: function (obj) {
        var _this = this;
        this.queue('write', arguments, function () {
            return _this.client.put(_this.path, obj)
                .then(function () {
                _this.status = true;
            })
                .catch(function (error) {
                _this.status = false;
                _this.lastError = error;
            });
        });
        return this;
    },
    push: function (obj) {
        var _this = this;
        this.queue('write', arguments, function () {
            var path = _this.path;
            if (path.slice(-1)[0] !== '/') {
                path += '/';
            }
            path += rest.generatePushID();
            return _this.client.put(path, obj)
                .then(function () {
                _this.status = true;
            })
                .catch(function (error) {
                _this.status = false;
                _this.lastError = error;
            });
        });
        return this;
    },
    read: function () {
        var _this = this;
        this.queue('read', arguments, function () {
            return _this.client.get(_this.path)
                .then(function () {
                _this.status = true;
            })
                .catch(function (error) {
                _this.status = false;
                _this.lastError = error;
            });
        });
        return this;
    },
    succeeds: function (message) {
        var _this = this;
        this.queue('succeeds', arguments, function () {
            assert(_this.status === true, _this.messageFormat(message + " (should have succeed)\n" + _this.lastError));
            _this.good(message);
            _this.status = undefined;
        });
        return this;
    },
    fails: function (message) {
        var _this = this;
        this.queue('fails', arguments, function () {
            assert(_this.status === false, _this.messageFormat(message + " (should have failed)"));
            _this.good(message);
            _this.status = undefined;
        });
        return this;
    },
    good: function (message) {
        this.log(message + " (Correct)");
    },
    log: function (message) {
        if (this.suite.debug) {
            console.log(this.messageFormat(message));
        }
    },
    messageFormat: function (message) {
        return this.suite.suiteName + "." + this.testName + " " + message;
    }
});

//# sourceMappingURL=data:application/json;base64,
