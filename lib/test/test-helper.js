"use strict";
var util = require('../util');
var ast = require('../ast');
var logger = require('../logger');
function dataDrivenTest(tests, testIt, formatter) {
    var data;
    var expect;
    var label;
    formatter = formatter || format;
    for (var i = 0; i < tests.length; i++) {
        if (typeof tests[i] !== 'object') {
            label = formatter(tests[i]);
            data = tests[i];
            expect = undefined;
        }
        else {
            data = tests[i].data;
            if (data === undefined) {
                data = tests[i][0];
            }
            if (data === undefined) {
                data = tests[i];
            }
            if (util.isType(data, 'object') && 'expect' in data) {
                data = util.extend({}, data);
                delete data.expect;
            }
            expect = tests[i].expect || tests[i][1];
            label = tests[i].label;
            if (label === undefined) {
                if (expect !== undefined) {
                    label = formatter(data) + " => " + formatter(expect);
                }
                else {
                    label = formatter(data);
                }
            }
        }
        setup(function () {
            logger.reset();
            logger.silent();
        });
        teardown(function () {
            logger.reset();
        });
        test(label, testIt.bind(undefined, data, expect, tests[i]));
    }
}
exports.dataDrivenTest = dataDrivenTest;
function format(o) {
    switch (util.typeOf(o)) {
        case 'regexp':
            return o.toString();
        default:
            return JSON.stringify(o);
    }
}
function expFormat(x) {
    if (util.isType(x, 'array')) {
        return '[' + x.map(expFormat).join(', ') + ']';
    }
    if (util.isType(x, 'object')) {
        if ('type' in x) {
            return ast.decodeExpression(x);
        }
        var result = '{';
        var sep = '';
        for (var prop in x) {
            if (!x.hasOwnProperty(prop)) {
                continue;
            }
            result += sep + expFormat(x[prop]);
            sep = ', ';
        }
        result += '}';
        return result;
    }
    return JSON.stringify(x);
}
exports.expFormat = expFormat;

//# sourceMappingURL=data:application/json;base64,
