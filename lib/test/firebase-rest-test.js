"use strict";
var Promise = require('promise');
var rest = require('../firebase-rest');
var secrets = require('../../auth-secrets');
var chai = require('chai');
var assert = chai.assert;
var TEST_LOCATION = '/rest-test';
suite("Firebase REST Tests", function () {
    var client = new rest.Client(secrets.APP);
    suiteSetup(function () {
        var adminClient = new rest.Client(secrets.APP, secrets.SECRET);
        return adminClient.put(rest.RULES_LOCATION, {
            rules: {
                ".read": true,
                ".write": false,
                "rest-test": {
                    ".write": true
                }
            }
        });
    });
    test("Read location", function () {
        return client.get(TEST_LOCATION);
    });
    test("Write data", function () {
        var tests = [
            { location: 'string', value: 'Hello, world.' },
            { location: 'integer', value: 123 },
            { location: 'number', value: 123.456 },
            { location: 'boolean', value: false },
            { location: 'object', value: { this: 1, that: 'other' } },
            { location: 'TIMESTAMP', value: rest.TIMESTAMP },
        ];
        var results = [];
        for (var i = 0; i < tests.length; i++) {
            var t = tests[i];
            results.push(client.put(TEST_LOCATION + '/types/' + t.location, t.value));
        }
        return Promise.all(results);
    });
    test("Invalid location", function () {
        return client.get('../../illegal')
            .catch(function (error) {
            return true;
        });
    });
    test("PushID", function () {
        var id1 = rest.generatePushID();
        var id2 = rest.generatePushID();
        assert.equal(id1.length, 20);
        assert.notEqual(id1, id2);
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZmlyZWJhc2UtcmVzdC10ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFrQkEsSUFBTyxPQUFPLFdBQVcsU0FBUyxDQUFDLENBQUM7QUFDcEMsSUFBTyxJQUFJLFdBQVcsa0JBQWtCLENBQUMsQ0FBQztBQUMxQyxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUM1QyxJQUFPLElBQUksV0FBVyxNQUFNLENBQUMsQ0FBQztBQUM5QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBRXpCLElBQUksYUFBYSxHQUFHLFlBQVksQ0FBQztBQUVqQyxLQUFLLENBQUMscUJBQXFCLEVBQUU7SUFDM0IsSUFBSSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUUxQyxVQUFVLENBQUM7UUFDVCxJQUFJLFdBQVcsR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQ3BCLElBQUksQ0FBQyxjQUFjLEVBQ25CO1lBQ0UsS0FBSyxFQUFFO2dCQUNMLE9BQU8sRUFBRSxJQUFJO2dCQUNiLFFBQVEsRUFBRSxLQUFLO2dCQUNmLFdBQVcsRUFBRTtvQkFDWCxRQUFRLEVBQUUsSUFBSTtpQkFDZjthQUNGO1NBQ0YsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsZUFBZSxFQUFFO1FBQ3BCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ25DLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLFlBQVksRUFBRTtRQUNqQixJQUFJLEtBQUssR0FBRztZQUNWLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFO1lBQzlDLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFO1lBQ25DLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFO1lBQ3RDLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO1lBQ3JDLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsRUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUMsRUFBRTtZQUN2RCxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUU7U0FDakQsQ0FBQztRQUNGLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNqQixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUN0QyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsR0FBRyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM1RSxDQUFDO1FBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsa0JBQWtCLEVBQUU7UUFDdkIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDO2FBQy9CLEtBQUssQ0FBQyxVQUFTLEtBQUs7WUFDbkIsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsUUFBUSxFQUFFO1FBQ2IsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ2hDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNoQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDN0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L2ZpcmViYXNlLXJlc3QtdGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGluZ3Mvbm9kZS5kLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGluZ3MvZXM2LXByb21pc2UuZC50c1wiIC8+XHJcblxyXG5pbXBvcnQgUHJvbWlzZSA9IHJlcXVpcmUoJ3Byb21pc2UnKTtcclxuaW1wb3J0IHJlc3QgPSByZXF1aXJlKCcuLi9maXJlYmFzZS1yZXN0Jyk7XHJcbnZhciBzZWNyZXRzID0gcmVxdWlyZSgnLi4vLi4vYXV0aC1zZWNyZXRzJyk7XHJcbmltcG9ydCBjaGFpID0gcmVxdWlyZSgnY2hhaScpO1xyXG52YXIgYXNzZXJ0ID0gY2hhaS5hc3NlcnQ7XHJcblxyXG52YXIgVEVTVF9MT0NBVElPTiA9ICcvcmVzdC10ZXN0JztcclxuXHJcbnN1aXRlKFwiRmlyZWJhc2UgUkVTVCBUZXN0c1wiLCBmdW5jdGlvbigpIHtcclxuICB2YXIgY2xpZW50ID0gbmV3IHJlc3QuQ2xpZW50KHNlY3JldHMuQVBQKTtcclxuXHJcbiAgc3VpdGVTZXR1cChmdW5jdGlvbigpIHtcclxuICAgIHZhciBhZG1pbkNsaWVudCA9IG5ldyByZXN0LkNsaWVudChzZWNyZXRzLkFQUCwgc2VjcmV0cy5TRUNSRVQpO1xyXG4gICAgcmV0dXJuIGFkbWluQ2xpZW50LnB1dChcclxuICAgICAgcmVzdC5SVUxFU19MT0NBVElPTixcclxuICAgICAge1xyXG4gICAgICAgIHJ1bGVzOiB7XHJcbiAgICAgICAgICBcIi5yZWFkXCI6IHRydWUsXHJcbiAgICAgICAgICBcIi53cml0ZVwiOiBmYWxzZSxcclxuICAgICAgICAgIFwicmVzdC10ZXN0XCI6IHtcclxuICAgICAgICAgICAgXCIud3JpdGVcIjogdHJ1ZVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoXCJSZWFkIGxvY2F0aW9uXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIGNsaWVudC5nZXQoVEVTVF9MT0NBVElPTik7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoXCJXcml0ZSBkYXRhXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHRlc3RzID0gW1xyXG4gICAgICB7IGxvY2F0aW9uOiAnc3RyaW5nJywgdmFsdWU6ICdIZWxsbywgd29ybGQuJyB9LFxyXG4gICAgICB7IGxvY2F0aW9uOiAnaW50ZWdlcicsIHZhbHVlOiAxMjMgfSxcclxuICAgICAgeyBsb2NhdGlvbjogJ251bWJlcicsIHZhbHVlOiAxMjMuNDU2IH0sXHJcbiAgICAgIHsgbG9jYXRpb246ICdib29sZWFuJywgdmFsdWU6IGZhbHNlIH0sXHJcbiAgICAgIHsgbG9jYXRpb246ICdvYmplY3QnLCB2YWx1ZToge3RoaXM6IDEsIHRoYXQ6ICdvdGhlcid9IH0sXHJcbiAgICAgIHsgbG9jYXRpb246ICdUSU1FU1RBTVAnLCB2YWx1ZTogcmVzdC5USU1FU1RBTVAgfSxcclxuICAgIF07XHJcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgdCA9IHRlc3RzW2ldO1xyXG4gICAgICByZXN1bHRzLnB1c2goY2xpZW50LnB1dChURVNUX0xPQ0FUSU9OICsgJy90eXBlcy8nICsgdC5sb2NhdGlvbiwgdC52YWx1ZSkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHJlc3VsdHMpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KFwiSW52YWxpZCBsb2NhdGlvblwiLCBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBjbGllbnQuZ2V0KCcuLi8uLi9pbGxlZ2FsJylcclxuICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KFwiUHVzaElEXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgbGV0IGlkMSA9IHJlc3QuZ2VuZXJhdGVQdXNoSUQoKTtcclxuICAgIGxldCBpZDIgPSByZXN0LmdlbmVyYXRlUHVzaElEKCk7XHJcbiAgICBhc3NlcnQuZXF1YWwoaWQxLmxlbmd0aCwgMjApO1xyXG4gICAgYXNzZXJ0Lm5vdEVxdWFsKGlkMSwgaWQyKTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
