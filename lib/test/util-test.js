"use strict";
var chai = require('chai');
var assert = chai.assert;
var helper = require('./test-helper');
var util = require('../util');
suite("Util", function () {
    suite("pruneEmptyChildren", function () {
        function T() {
            this.x = 'dummy';
        }
        var tests = [
            [{}, {}],
            [{ a: 1 }, { a: 1 }],
            [{ a: {} }, {}],
            [{ a: 1, b: {} }, { a: 1 }],
            [{ a: [] }, { a: [] }],
            [{ a: new T() }, { a: new T() }],
            [{ a: { a: { a: {} } } }, {}],
            [{ a: { a: { a: {}, b: 1 } } }, { a: { a: { b: 1 } } }],
            [{ a: 1, b: undefined }, { a: 1 }],
        ];
        helper.dataDrivenTest(tests, function (data, expect) {
            util.pruneEmptyChildren(data);
            assert.deepEqual(data, expect);
        });
    });
    suite("pruneEmptyChildren", function () {
        var tests = [
            [{}, {}],
            [{ a: 1 }, { a: 1 }],
            [{ a: 1, dm: 2 }, { a: 1 }],
            [{ a: 1, b: { dm: 2, c: 3 } }, { a: 1, b: { c: 3 } }],
        ];
        helper.dataDrivenTest(tests, function (data, expect) {
            util.deletePropName(data, 'dm');
            assert.deepEqual(data, expect);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,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LGNBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDaEMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvdXRpbC10ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5pbXBvcnQgY2hhaSA9IHJlcXVpcmUoJ2NoYWknKTtcclxudmFyIGFzc2VydCA9IGNoYWkuYXNzZXJ0O1xyXG5pbXBvcnQgaGVscGVyID0gcmVxdWlyZSgnLi90ZXN0LWhlbHBlcicpO1xyXG5cclxudmFyIHV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XHJcblxyXG5zdWl0ZShcIlV0aWxcIiwgZnVuY3Rpb24oKSB7XHJcbiAgc3VpdGUoXCJwcnVuZUVtcHR5Q2hpbGRyZW5cIiwgZnVuY3Rpb24oKSB7XHJcbiAgICBmdW5jdGlvbiBUKCkge1xyXG4gICAgICB0aGlzLnggPSAnZHVtbXknO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciB0ZXN0cyA9IFtcclxuICAgICAgWyB7fSwge30gXSxcclxuICAgICAgWyB7YTogMX0sIHthOiAxfSBdLFxyXG4gICAgICBbIHthOiB7fX0sIHt9IF0sXHJcbiAgICAgIFsge2E6IDEsIGI6IHt9fSwge2E6IDF9IF0sXHJcbiAgICAgIFsge2E6IFtdfSwge2E6IFtdfSBdLFxyXG4gICAgICBbIHthOiBuZXcgVCgpfSwge2E6IG5ldyBUKCl9IF0sXHJcbiAgICAgIFsge2E6IHthOiB7YToge319fX0sIHt9IF0sXHJcbiAgICAgIFsge2E6IHthOiB7YToge30sIGI6IDF9fX0sIHthOiB7YToge2I6IDF9fX0gXSxcclxuICAgICAgWyB7YTogMSwgYjogdW5kZWZpbmVkfSwge2E6IDF9IF0sXHJcbiAgICBdO1xyXG5cclxuICAgIGhlbHBlci5kYXRhRHJpdmVuVGVzdCh0ZXN0cywgZnVuY3Rpb24oZGF0YSwgZXhwZWN0KSB7XHJcbiAgICAgIHV0aWwucHJ1bmVFbXB0eUNoaWxkcmVuKGRhdGEpO1xyXG4gICAgICBhc3NlcnQuZGVlcEVxdWFsKGRhdGEsIGV4cGVjdCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgc3VpdGUoXCJwcnVuZUVtcHR5Q2hpbGRyZW5cIiwgZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgdGVzdHMgPSBbXHJcbiAgICAgIFsge30sIHt9IF0sXHJcbiAgICAgIFsge2E6IDF9LCB7YTogMX0gXSxcclxuICAgICAgWyB7YTogMSwgZG06IDJ9LCB7YTogMX0gXSxcclxuICAgICAgWyB7YTogMSwgYjoge2RtOiAyLCBjOiAzfX0sIHthOiAxLCBiOiB7YzogM319IF0sXHJcbiAgICBdO1xyXG5cclxuICAgIGhlbHBlci5kYXRhRHJpdmVuVGVzdCh0ZXN0cywgZnVuY3Rpb24oZGF0YSwgZXhwZWN0KSB7XHJcbiAgICAgIHV0aWwuZGVsZXRlUHJvcE5hbWUoZGF0YSwgJ2RtJyk7XHJcbiAgICAgIGFzc2VydC5kZWVwRXF1YWwoZGF0YSwgZXhwZWN0KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
